#!/bin/bash

set -e

# General defaults
SCRIPT_NAME="$(basename ${0})"
OUT=$(pwd)"/"
CREATE_PATH=0
INTERACT=1
BITS=2048

# Certificate authority defaults
CA_KEY=""
CA=""
CA_ONLY=""
TRUST=""
SUBJ=""

# Signed certificate defaults
DAYS=365 # 1 year
C=""
S=""
L=""
O=""
OU=""
CN=""
SAN=""
EMAIL=""

# Safe exit
_safe_exit() {
    trap - INT TERM EXIT
    exit $@
}

# Help Screen
help() {
cat <<EOF
${SCRIPT_NAME}
This is script to simplify the creatiion of a certificate authority and self-signed TLS certificates using OpenSSL.


Usage:

${SCRIPT_NAME} [OPTIONS]
${SCRIPT_NAME} --trust -c US -s California -l 'Los Angeles' -o 'Example Org' -u 'Example Unit'
${SCRIPT_NAME} --ca-key=/path/to/CA.key --ca-cert=/path/to/CA.pem --ca-only


General Options:

  -h|--help            Display this help and exit
  -p|--path            Path to output generated files
  --no-interaction     Disables interactive prompts for answers
  -d|--duration        Validity duration of the certificate (in days)
  -b|--bits            Key size in bits (default '2048')

Certificate Authority Options:

  --ca-key             Path to certificate authority key file
                       (Generates new CA if not set)
  --ca-cert            Path to certificate authority cert file
                       (Generates new CA if not set)
  --ca-only            Instructs script to generate a certificate authority, and not to generate a signed certificate
  -t|--trust           Flag to trust certificate authority
                       (Do not set for default 'false')

Certificate Subject Options:

  -c|--country         Country Name (2 letter code)
  -s|--state           State or Province Name (full name)
  -l|--locality        Locality Name (eg, city)
  -o|--organization    Organization Name (eg, company)
  -u|--unit            Organizational Unit Name (eg, section)
  -n|--common-name     Common Name (e.g. server FQDN or YOUR name)
  -a|--san             Comma-delimited list of subject alternative names
  -e|--email           Email Address
EOF
}

# Parse variables
_parse_vars() {
    while [ -n "$1" ]; do
        # Parse arguments without values
        if [[ " -h -t " =~ " $1 " ]]; then
            ARG="${1}"
            VALUE=""
            shift
        # Parse arguments with "="
        elif [ "${1:0:2}" == "--" -o "${1:2:1}" == "=" ]; then
            ARG=${1%%=*}
            VALUE=${1/$ARG=/}
            shift
        # Parse arguments separated by space
        else
            ARG="$1"
            VALUE="$2"
            shift 2
        fi

        # Map values
        case $ARG in
            -h|--help) help; _safe_exit;;
            --ca-key) CA_KEY="$VALUE";;
            --ca-cert) CA="$VALUE";;
            --ca-only) CA_ONLY=1;;
            -t|--trust) TRUST=1;;
            -c|--country) C="$VALUE";;
            -s|--state) ST="$VALUE";;
            -l|--locality) L="$VALUE";;
            -o|--organization) O="$VALUE";;
            -u|--unit) OU="$VALUE";;
            -n|--common-name) CN="$VALUE"; HAS_CN=true;;
            -a|--san) SAN="$VALUE";;
            -e|--email) EMAIL="$VALUE";;
            --no-interaction) INTERACT=0;;
            -p|--path) OUT="$VALUE";;
            --path-create) CREATE_PATH=1;;
            -d|--duration) DAYS="$VALUE";;
            -b|--bits) BITS="$VALUE";;
            -v|--verbose) echo "Warn: -v|--verbose option is deprecated.";;
            *) echo "ERROR: unknown parameter \"${ARG}\""; help; _safe_exit 1 ;;
        esac
    done
}

# Prompt for required variables that were not provided
_check_vars() {
    # Certificate authority files
    if [ -n "$CA_KEY" -a -n "$CA" ]; then
        if [ ! -f "$CA_KEY" ]; then
            echo "The specified certificate authorify key file does not exist"
            _safe_exit 1
        fi

        if [ ! -f "$CA" ]; then
            echo "The specified certificate authorify file does not exist"
            _safe_exit 1
        fi
    fi

    # Country
    if [ -z "$C" -a $INTERACT -eq 1 ]; then
        printf "Country Name (2 letter code) [AU]: "
        read -r C
    fi

    # State
    if [ -z "$ST" -a $INTERACT -eq 1 ]; then
        printf "State or Province Name (full name) [Some-State]: "
        read -r ST
    fi

    # Locality
    if [ -z "$L" -a $INTERACT -eq 1 ]; then
        printf "Locality Name (eg, city) []: "
        read -r L
    fi

    # Organization
    if [ -z "$O" -a $INTERACT -eq 1 ]; then
        printf "Organization Name (eg, company) [Internet Widgits Pty Ltd]: "
        read -r O
    fi

    # Organizational Unit
    if [ -z "$OU" -a $INTERACT -eq 1 ]; then
        printf "Organizational Unit Name (eg, section) []: "
        read -r OU
    fi

    # Common Name
    if [ -z "$CN" ]; then
        printf "Common Name (e.g. server FQDN or YOUR name) []: "
        read -r CN
    fi

    # Subject Alternative Names
    if [ -z "$SAN" -a -z "$HAS_CN" -a $INTERACT -eq 1 ]; then
        printf "Subject Alternative Name(s) (e.g. subdomains) []: "
        read -r SAN
    fi

    # Build DNS
    i=0
    read -r -a URLS <<< "${CN} ${SAN//,/ }"
    SAN=""
    for u in "${URLS[@]}"; do
        if [ -n "$u" ]; then
            i=$((i+1))
            SAN="${SAN}DNS.${i} = ${u// /}"$'\n'
        fi
    done

    # Email Address
    if [ -z "$EMAIL" -a $INTERACT -eq 1 ]; then
        printf "Email Address []: "
        read -r EMAIL
    fi

    # Make sure output directory ends with a directory separator
    if [ "${OUT: -1}" != "/" ]; then
        OUT="${OUT}/"
    fi

    # Check if output directory exists
    if [ ! -d "$OUT" ]; then
        if [ $CREATE_PATH -eq 1 ]; then
            # Create path
            mkdir -p "$OUT" || echo "Could not create directory \"${OUT}\"" && _safe_exit 1
        else
            # Report non-existent path
            echo "The specified directory \"${OUT}\" does not exist"
            _safe_exit 1
        fi
    fi

    # Build subject
    if [ -n "$C" ]; then
        SUBJ="${SUBJ}/C=${C}"
    fi
    if [ -n "$ST" ]; then
        SUBJ="${SUBJ}/ST=${ST}"
    fi
    if [ -n "$L" ]; then
        SUBJ="${SUBJ}/L=${L}"
    fi
    if [ -n "$O" ]; then
        SUBJ="${SUBJ}/O=${O}"
    fi
    if [ -n "$OU" ]; then
        SUBJ="${SUBJ}/OU=${OU}"
    fi
    if [ -n "$CN" ]; then
        SUBJ="${SUBJ}/CN=${CN}"
    fi
    if [ -n "$EMAIL" ]; then
        SUBJ="${SUBJ}/emailAddress=${EMAIL}"
    fi
}

# Trust certificate authority
_add_trusted_cert() {
    if [ -z "$TRUST" ]; then
        return
    fi

    case "${OSTYPE:-undefined}" in
        # MacOS
        darwin*) sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" "$CA";;
        # linux*) ;;
        *) echo "Unsupported OSTYPE '${OSTYPE:-undefined}'";;
    esac
}

# Build certificate authority
_build_ca() {
    CA_KEY="${OUT}CA.key"
    CA="${OUT}CA.pem"

    # Use existing CA in current directory
    if [ -f "$CA_KEY" -a -f "$CA" ]; then
        return
    fi

    # Generate certificate authority files
    openssl genrsa -out "$CA_KEY" "$BITS"
    openssl req -new -nodes -x509 -sha256 \
        -subj "$SUBJ" \
        -days "$DAYS" \
        -key "$CA_KEY" \
        -out "$CA"

    # Trust certificate
    _add_trusted_cert
}

# Sign certificate
_build_cert() {
    FILE=${CN/\*\./}

    # Build 
    cat > "${OUT}${FILE}.ext" << EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
${SAN}
EOF

    # Generate key and certificate signing request
    openssl genrsa -out "${OUT}${FILE}.key" "$BITS"
    openssl req -new -nodes -sha256 \
        -subj "$SUBJ" \
        -newkey "rsa:${BITS}" \
        -key "${OUT}${FILE}.key" \
        -out "${OUT}${FILE}.csr"

    # Create a signed certificate
    openssl x509 -req -sha256 -CAcreateserial \
        -CA "$CA" \
        -CAkey "$CA_KEY" \
        -days "$DAYS" \
        -extfile "${OUT}${FILE}.ext" \
        -in "${OUT}${FILE}.csr" \
        -out "${OUT}${FILE}.crt"

    rm -f "${OUT}${FILE}.ext"
}

# Process variables
_parse_vars "$@"
_check_vars

# Build certificate authority
if [ -z "$CA" -o -z "$CA_KEY" ]; then
    echo "Building certificate authority"
    _build_ca
fi

# Build certificate
if [ -z "$CA_ONLY" ]; then
    _build_cert
fi

_safe_exit
